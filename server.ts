import { Telegraf } from "npm:telegraf";
import { BIKES, DebugButtons, DebugButtonsKey, ExtraButtons, ExtraButtonsKey, } from "./constants.ts";
import db from "./database.ts";
import config from "./config.ts";
import { getDebugKeyboard, getKeyboard } from "./keyboards.ts";
import { handleAvito } from "./avito/index.ts";
import { getInfo } from "./bikeinn/index.ts";
import { handleBikeinn } from "./bikeinn/handler.ts";

/** HTTP server */
Deno.serve({ port: 3000 }, async (_req) => {
  await handleBikeinn();

  await handleAvito();

  return new Response("ok");
});

const bot = new Telegraf(config.TOKEN);

export const notifySubscribers = async (message: string) => {
  const entries = db.getSubscribedUsers();
  for await (const entry of entries) {
    await bot.telegram.sendMessage(
      entry.key[1].toString(),
      message,
    );
  }
};

/** Bikes –∫–Ω–æ–ø–∫–∏ */
const prepareBikesButtonsHears = () => {
  Object.entries(BIKES).forEach(([bike, data]) => {
    bot.hears(bike, async (ctx) => {
      const info = await getInfo(data.dataUrl);
      if (!info) {
        return ctx.reply("–û—à–∏–±–∫–∞ API");
      }
      ctx.replyWithPhoto(
        data.imageUrl,
        {
          caption: `${info.model}\n–¶–µ–Ω–∞: ${info.price} —Ä—É–±–ª–µ–π`,
          ...(await getKeyboard(ctx.chat.id)),
        },
      );
    });
  });
};

/** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */
const prepareExtraButtonsHears = () => {
  Object.keys(ExtraButtons).forEach((button) => {
    bot.hears(button, async (ctx) => {
      switch (button as ExtraButtonsKey) {
        case "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã":
          await db.setSubscribed(ctx.chat.id);
          ctx.reply(
            "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã",
            await getKeyboard(ctx.chat.id),
          );
          break;
        case "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
          await db.deleteSubscription(ctx.chat.id);
          ctx.reply("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", await getKeyboard(ctx.chat.id));
          break;
        case "Debug":
          ctx.reply("Enter debug mode", getDebugKeyboard());
          break;
        default:
          ctx.reply("–ù–µ—Ç!‚ùå‚ùå‚ùå");
      }
    });
  });
};

/** Debug –∫–Ω–æ–ø–∫–∏ */
const prepareDebugButtons = () => {
  Object.keys(DebugButtons).forEach((button) => {
    bot.hears(button, async (ctx) => {
      switch (button as DebugButtonsKey) {
        case "–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤": {
          let msg = "";
          const entries = db.getSubscribedUsers();
          for await (const entry of entries) {
            msg += entry.key[1].toString() + "\n";
          }
          ctx.reply(msg || "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ—Ç");

          break;
        }
        case "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": {
          const entries = db.getSubscribedUsers();
          for await (const entry of entries) {
            await bot.telegram.sendMessage(
              entry.key[1].toString(),
              "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            );
          }

          break;
        }
        case "–í–µ–± —Å—Å—ã–ª–∫–∏":
          {
            let msg = "";
            Object.entries(BIKES).forEach(([bike, data]) => {
              msg += `${bike}\n${data.webUrl}\n`;
            });
            ctx.reply(msg);

            break;
          }
        case "Avito" : {
          const count = await handleAvito();
          ctx.reply(count?.toString() || '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
          break;
        }
        case "Exit debug":
          ctx.reply("Enter normal mode", await getKeyboard(ctx.chat.id));
          break;
        default:
          ctx.reply("ü•∫");
      }
    });
  });
};

// bootstrap
(() => {
  try {
    bot.start(async (ctx) => {
      ctx.replyWithHTML(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>bike-price-bot</b>\n\n" +
          "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ <b>–Ω–∏–∂–µ</b>",
        await getKeyboard(ctx.chat.id),
      );
    });

    prepareBikesButtonsHears();
    prepareExtraButtonsHears();
    prepareDebugButtons();

    bot.launch().then(() => console.log("Bot launched successfully"));
  } catch (error) {
    console.error("Error initializing bot:", error);
  }
})();
